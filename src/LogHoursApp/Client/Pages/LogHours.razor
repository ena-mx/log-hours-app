@page "/log-hours"
@using LogHoursApp.Shared;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;

@attribute [Authorize(Roles = "worker")]

@inject HttpClient Http

<PageTitle>Log Dates</PageTitle>
<h1>Entry Log Dates</h1>

<EditForm Model="@LoggedHourModel" OnValidSubmit="HandleSubmit" class="row g-3">
    <DataAnnotationsValidator />
    <div class="col-auto">
        <label for="hours">Hours</label>
        <InputNumber id="hours" class="form-control" @bind-Value="@LoggedHourModel.Hours"></InputNumber>
    </div>
    <div class="col-auto">
        <label for="date">Date</label>
        <InputDate id="date" class="form-control" @bind-Value="@LoggedHourModel.Date"></InputDate>
    </div>
    <div class="col-auto">
        <label for="description">Description</label>
        <InputText id="description" class="form-control" @bind-Value="@LoggedHourModel.Description"></InputText>
    </div>
    <div class="col-auto" style="display: flex; flex-direction: column-reverse;">
        <button type="submit" class="btn btn-primary mb-3" style="margin-bottom: 0 !important;">
            Submit
        </button>
    </div>
</EditForm>

@if (LoggedHours == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Hours</th>
                <th>Description</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var loggedHour in LoggedHours)
            {
                <tr>
                    <td>@loggedHour.Date.ToShortDateString()</td>
                    <td>@loggedHour.Hours</td>
                    <td>@loggedHour.Description</td>
                    <td>
                        @if(loggedHour.Approved)
                        {
                            <span class="oi oi-check" aria-hidden="true"></span>
                        }
                        else
                        {
                            <span class="oi oi-loop-circular" aria-hidden="true"></span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private LoggedHour LoggedHourModel = new LoggedHour();
    private List<LoggedHour> LoggedHours = null;

    protected override async Task OnInitializedAsync()
    {
        await GetLoggedHours();
    }

    private async Task GetLoggedHours()
    {
        try
        {
            LoggedHours = await Http.GetFromJsonAsync<List<LoggedHour>>("api/logged-hours") ?? new List<LoggedHour>();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task HandleSubmit()
    {
        await Http.PostAsJsonAsync("api/logged-hours", LoggedHourModel);
        LoggedHourModel = new LoggedHour();
        await GetLoggedHours();
    }
}
